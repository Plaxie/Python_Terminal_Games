from numpy import s_


table = [['a', 'b', 'c', 'e', 'f', 'b', 'c'],
         ['d', 'e', 'f', 'e', 'f', 'b', 'c'],
         ['g', 'h', 'i', 'e', 'f', 'b', 'c'],
         ['j', 'k', 'l', 'e', 'f', 'b', 'c'],
         ['g', 'h', 'i', 'e', 'f', 'b', 'c'],
         ['j', 'k', 'l', 'e', 'f', 'b', 'c']]

Table = list[list[str]]

def RCROSS(table: Table) -> list[str]:
    
    '''Gets the cross in the table'''

    if len(table) < 3 or len(table[0]) < 3: return []

    result = []
    
    # Calculate number of rows and columns
    rows = len(table)
    cols = len(table[0])

    # Iterate over each diagonal starting from the top-right corner
    for i in range(cols):
        word = ''
        row = 0
        col = i
        while row < rows and col >= 0:
            word += table[row][col]
            row += 1
            col -= 1
        result.append(((col + 1, row - 1), word))

    # Iterate over each diagonal starting from the top-left corner (excluding the main diagonal)
    for i in range(1, rows):
        word = ''
        row = i
        col = cols - 1
        while row < rows and col >= 0:
            word += table[row][col]
            row += 1
            col -= 1
        result.append(((col, row - 1), word))

    return result[2:-2]


def LCROSS(table: list[list[str]]) -> list[str]:
    '''Gets the cross in the table'''

    if len(table) < 3 or len(table[0]) < 3: return []

    diagonals = []
    num_rows = len(table)
    num_cols = len(table[0])

    # Iterate over each starting position in the first column
    for i in range(num_rows):
        row, col = i, 0
        diagonal = []
        while row < num_rows and col < num_cols:
            diagonal.append(table[row][col])
            row += 1
            col += 1
        diagonals.append(((col - 1, row - 1), ''.join(diagonal)))

    # Iterate over each starting position in the first row (excluding the first element which has already been visited)
    for j in range(1, num_cols):
        row, col = 0, j
        diagonal = []
        while row < num_rows and col < num_cols:
            diagonal.append(table[row][col])
            row += 1
            col += 1
        diagonals.append(((col- 1, row - 1), ''.join(diagonal)))

    return diagonals[:-4]


for i in RCROSS(table):
    print(i)